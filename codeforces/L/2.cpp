#include<stdio.h>
#include<iostream>
#include<stdlib.h>
#include<string>
#include<string.h>
#include<algorithm>
#include<stack>
#include<queue>
#include<iterator>
#include<time.h>
using namespace std;
#define MAX   10

int n = 21;
int x, y, a, b;
struct  point
{
	int x, y, dis;//x坐标y坐标步数
};
int fx[4] = { -1,0,1,0 }, fy[4] = { 0,1,0,-1 };
void prri(point road[100][100],int x,int y) {
	if (x == 1 && y == 1) 
	{
		return;
	}
	prri(road, road[x][y].x, road[x][y].y);
	cout << "(" << road[x][y].x << " " << road[x][y].y << ")" << endl;
}
int bfs(int x, int y, int maze[21][21])
{
	queue<point> myque;
	point road[100][100];
	point tp;
	
	tp.x = x; tp.y = y; tp.dis = 0;//初始化开始节点dis设为0
	road[1][1] = tp;
	myque.push(tp);
	while (!myque.empty())
	{
		tp = myque.front(); myque.pop();//从队头取节点
		if (tp.x == a && tp.y == b) {
			prri(road, a, b);
			return tp.dis;
		}//判断是否到达目的地
		for (int i = 0; i < 4; i++)
		{
			if (tp.x + fx[i] < n-1 && tp.x + fx[i] > 0 && tp.y + fy[i] < n-1 &&
				tp.y + fy[i] >= 1 && maze[tp.x + fx[i]][tp.y + fy[i]] == 0)
			{
				point tmp;
				tmp.x = tp.x + fx[i];
				tmp.y = tp.y + fy[i];
				tmp.dis = tp.dis + 1;
				maze[tmp.x][tmp.y] = 1;//添加进队列就将该位置设为1
				road[tmp.x][tmp.y] = tp;
				myque.push(tmp);
			}
		}
	}
	return 0;

}

int main()
{
    /*
		int maze[9][9] =
		{ { 1,1,1,1,1,1,1,1,1 },
		{ 1,0,0,1,0,0,1,0,1 },
		{ 1,0,0,1,1,0,0,0,1 },
		{ 1,0,1,0,1,1,0,1,1 },
		{ 1,0,0,0,0,1,0,0,1 },
		{ 1,1,0,1,0,1,0,0,1 },
		{ 1,1,0,1,0,1,0,0,1 },
		{ 1,1,0,1,0,0,0,0,1 },
		{ 1,1,1,1,1,1,1,1,1 },
		};
		int maze[9][8] = 
		{{1,1,1,1,1,1,1,1,1}
		{1,0,0,0,0,0,0,0,1}
		{1,1,1,0,1,0,1,1,1}
		{1,0,0,0,1,0,0,0,1}
		{1,0,1,0,0,0,1,0,1}
		{1,0,1,0,1,0,1,0,1}
		{1,0,1,0,0,0,0,0,1}
		{1,1,1,1,1,1,1,1,1}
		}
		int maze[7][9]=
		{{1,1,1,1,1,1,1}
		 {1,0,0,0,1,0,1}
		 {1,0,1,0,1,0,1}
		 {1,0,1,0,1,0,1}
		 {1,0,1,0,1,0,1}
		 {1,0,0,0,0,0,1}
		 {1,0,1,1,1,0,1}
		 {1,0,1,0,0,0,1}
		 {1,1,1,1,1,1,1}
		}*/
        n=21;
		int maze[21][21]=
		{{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1},
		{1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1},
		{1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1},
		{1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1},
		{1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1},
		{1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1},
		{1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1},
		{1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1},
		{1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1},
		{1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1},
		{1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1},
		{1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1},
		{1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1},
		{1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1},
		{1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1},
		{1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1},
		{1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1},
		{1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		};
		
		cin >> x >> y >> a >> b;
		clock_t start, finish;
		double totaltime;
		start = clock();
	    //cout <<"\n所走步数为"<< bfs(x, y, maze) << endl;
    	finish = clock();
		totaltime = (double)(finish - start) / CLOCKS_PER_SEC;
        bfs(x, y, maze);
		//cout << "\n此程序的运行时间为" << totaltime*1000 << "毫秒！" << endl;
		//cout << "起始状态为" << x << y << endl;
		//cout << "目标状态为" << a << b << endl;
		system("pause");
	   
	return 0;
}
